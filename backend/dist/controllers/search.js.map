{"version":3,"sources":["../../src/controllers/search.js"],"names":["searchRecipe","req","res","allowParameters","matchObj","query","page","i","length","$elemMatch","name","$or","RegExp","description","cuisine","countRows","RecipeModel","countDocuments","count","filter","aggregate","$match","$sort","createdAt","$skip","Number","$limit","filteredRecipes","Promise","all","then","result","send","numberOfRows"],"mappings":"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","sourcesContent":["import RecipeModel from \"../models/recipe\";\n\nexport async function searchRecipe(req, res) {\n  const allowParameters = [\"cuisine\", \"term\", \"allergens\", \"difficulty\"];\n  let matchObj = {};\n\n  if (!req.query.page) {\n    req.query.page = 1;\n  }\n\n  for (let i = 0; i < allowParameters.length; i++) {\n    if (req.query[allowParameters[i]] && req.query[allowParameters[i]] !== \"\") {\n      if (allowParameters[i] === \"allergens\") {\n        matchObj[allowParameters[i]] = {\n          $elemMatch: {\n            name: req.query[allowParameters[i]]\n          }\n        };\n      } else if (allowParameters[i] === \"term\") {\n        matchObj = {\n          ...matchObj,\n          $or: [\n            { name: new RegExp(req.query[\"term\"], \"igm\") },\n            { description: new RegExp(req.query[\"term\"], \"igm\") },\n            { cuisine: new RegExp(req.query[\"term\"], \"igm\") }\n          ]\n        };\n      } else {\n        matchObj[allowParameters[i]] = req.query[allowParameters[i]];\n      }\n    }\n  }\n\n  const countRows = async () => {\n    const count = await RecipeModel.countDocuments(matchObj);\n    return count;\n  };\n  const filter = async () => {\n    const filteredRecipes = await RecipeModel.aggregate([\n      { $match: matchObj },\n      { $sort: { createdAt: -1 } },\n      { $skip: (Number(req.query.page) - 1) * 10 },\n      { $limit: 10 }\n    ]);\n    return filteredRecipes;\n  };\n\n  Promise.all([countRows(), filter()]).then(result => {\n    res.send({ numberOfRows: result[0], filteredRecipes: result[1] });\n  });\n}"],"file":"search.js"}