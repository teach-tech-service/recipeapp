{"version":3,"sources":["../../src/controllers/recipe.js"],"names":["ObjectId","Types","getRecipeById","req","res","id","params","status","send","RecipeModel","findOne","_id","recipe","getRecipePage","aggregate","$skip","Number","page","$limit","recipes","getNumberOfRecipes","countDocuments","numberofRecipes","Promise","all","then","result","length","numberOfRecipes","currentPage","getRecipeInfo","getDistinctAllergens","$unwind","$group","count","$sum","$project","name","distinctAllergens","getDistinctCuisine","distinctCuisine","allergens","cuisine","postRecipe","console","log","body","save","err"],"mappings":"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","sourcesContent":["import RecipeModel from \"../models/recipe\";\nimport { Types } from \"mongoose\";\n\nconst { ObjectId } = Types;\n\nexport async function getRecipeById(req, res) {\n    const { id } = req.params;\n    if (!id) {\n        return res.status(400).send({});\n    }\n\n    const recipe = await RecipeModel.findOne({\n        _id: new ObjectId(id)\n    });\n\n    if (!recipe) {\n        return res.status(404).send({});\n    }\n\n    res.send({ recipe });\n}\n\nexport function getRecipePage(req, res) {\n    const getRecipePage = async function () {\n        const recipes = await RecipeModel.aggregate([\n            {\n                $skip: (Number(req.params.page) - 1) * 10\n            },\n            {\n                $limit: 10\n            }\n        ]);\n        return recipes;\n    };\n\n    const getNumberOfRecipes = async function () {\n        const numberofRecipes = await RecipeModel.countDocuments({});\n        return numberofRecipes;\n    };\n\n    Promise.all([getRecipePage(), getNumberOfRecipes()]).then(result => {\n        if (result[0].length === 0) {\n            return res.status(404).send({\n                numberOfRecipes: result[1],\n                currentPage: req.params.page\n            });\n        }\n        res.send({\n            recipes: result[0],\n            numberOfRecipes: result[1],\n            currentPage: req.params.page\n        });\n    });\n}\n\nexport function getRecipeInfo(req, res) {\n    const getDistinctAllergens = async function () {\n        const distinctAllergens = await RecipeModel.aggregate([\n            {\n                $unwind: \"$allergens\"\n            },\n            {\n                $group: {\n                    _id: \"$allergens.name\",\n                    count: {\n                        $sum: 1\n                    }\n                }\n            },\n            {\n                $project: {\n                    _id: 0,\n                    name: \"$_id\",\n                    count: 1\n                }\n            }\n        ]);\n        return distinctAllergens;\n    };\n\n    const getDistinctCuisine = async function () {\n        const distinctCuisine = await RecipeModel.aggregate([\n            {\n                $group: {\n                    _id: \"$cuisine\",\n                    count: {\n                        $sum: 1\n                    }\n                }\n            },\n            {\n                $project: {\n                    _id: 0,\n                    name: \"$_id\",\n                    count: 1\n                }\n            }\n        ]);\n        return distinctCuisine;\n    };\n\n    Promise.all([getDistinctAllergens(), getDistinctCuisine()]).then(result => {\n        res.send({\n            allergens: result[0],\n            cuisine: result[1]\n        });\n    });\n}\n\nexport async function postRecipe(req, res) {\n    console.log(req.body.recipe)\n    let recipe = new RecipeModel(req.body.recipe);\n    recipe.save(err => {\n        if (err) {\n            console.log(err);\n            return res.status(400).send({ err });\n        }\n        res.send({});\n    });\n}\n"],"file":"recipe.js"}