{"version":3,"sources":["../../src/helpers/groupBy.js"],"names":["groupByWithCount","field","Recipes","aggregate","$group","_id","numberOfRecipes","$sum","$project","name","recipes"],"mappings":";;;;;;;AAAA;;;;;;;;SAEsBA,gB;;;;;;;0BAAf,iBAAgCC,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACiBC,mBAAQC,SAAR,CAAkB,CACtC;AACEC,cAAAA,MAAM,EAAE;AACNC,gBAAAA,GAAG,aAAMJ,KAAN,CADG;AAENK,gBAAAA,eAAe,EAAE;AACfC,kBAAAA,IAAI,EAAE;AADS;AAFX;AADV,aADsC,EAStC;AACEC,cAAAA,QAAQ,EAAE;AACRH,gBAAAA,GAAG,EAAE,CADG;AAERI,gBAAAA,IAAI,EAAE,MAFE;AAGRH,gBAAAA,eAAe,EAAE;AAHT;AADZ,aATsC,CAAlB,CADjB;;AAAA;AACCI,YAAAA,OADD;AAAA,6CAkBEA,OAlBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import Recipes from \"../models/recipe\";\n\nexport async function groupByWithCount(field) {\n  const recipes = await Recipes.aggregate([\n    {\n      $group: {\n        _id: `$${field}`,\n        numberOfRecipes: {\n          $sum: 1\n        }\n      }\n    },\n    {\n      $project: {\n        _id: 0,\n        name: \"$_id\",\n        numberOfRecipes: 1\n      }\n    }\n  ]);\n  return recipes;\n}\n"],"file":"groupBy.js"}